// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessagePrepareReadACK.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessagePrepareReadACK.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MessagePrepareReadACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessagePrepareReadACK_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessagePrepareReadACK_2eproto() {
  protobuf_AddDesc_MessagePrepareReadACK_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessagePrepareReadACK.proto");
  GOOGLE_CHECK(file != NULL);
  MessagePrepareReadACK_descriptor_ = file->message_type(0);
  static const int MessagePrepareReadACK_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePrepareReadACK, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePrepareReadACK, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePrepareReadACK, fileoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePrepareReadACK, partid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePrepareReadACK, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePrepareReadACK, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePrepareReadACK, port_),
  };
  MessagePrepareReadACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessagePrepareReadACK_descriptor_,
      MessagePrepareReadACK::default_instance_,
      MessagePrepareReadACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePrepareReadACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePrepareReadACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessagePrepareReadACK));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessagePrepareReadACK_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessagePrepareReadACK_descriptor_, &MessagePrepareReadACK::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessagePrepareReadACK_2eproto() {
  delete MessagePrepareReadACK::default_instance_;
  delete MessagePrepareReadACK_reflection_;
}

void protobuf_AddDesc_MessagePrepareReadACK_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033MessagePrepareReadACK.proto\"\211\001\n\025Messag"
    "ePrepareReadACK\022\020\n\010ClientId\030\001 \002(\003\022\r\n\005Tok"
    "en\030\002 \002(\t\022\022\n\nFileOffset\030\003 \002(\003\022\016\n\006PartId\030\004"
    " \002(\003\022\014\n\004Size\030\005 \002(\003\022\017\n\007Address\030\006 \001(\t\022\014\n\004P"
    "ort\030\007 \001(\005", 169);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessagePrepareReadACK.proto", &protobuf_RegisterTypes);
  MessagePrepareReadACK::default_instance_ = new MessagePrepareReadACK();
  MessagePrepareReadACK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessagePrepareReadACK_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessagePrepareReadACK_2eproto {
  StaticDescriptorInitializer_MessagePrepareReadACK_2eproto() {
    protobuf_AddDesc_MessagePrepareReadACK_2eproto();
  }
} static_descriptor_initializer_MessagePrepareReadACK_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MessagePrepareReadACK::kClientIdFieldNumber;
const int MessagePrepareReadACK::kTokenFieldNumber;
const int MessagePrepareReadACK::kFileOffsetFieldNumber;
const int MessagePrepareReadACK::kPartIdFieldNumber;
const int MessagePrepareReadACK::kSizeFieldNumber;
const int MessagePrepareReadACK::kAddressFieldNumber;
const int MessagePrepareReadACK::kPortFieldNumber;
#endif  // !_MSC_VER

MessagePrepareReadACK::MessagePrepareReadACK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessagePrepareReadACK)
}

void MessagePrepareReadACK::InitAsDefaultInstance() {
}

MessagePrepareReadACK::MessagePrepareReadACK(const MessagePrepareReadACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessagePrepareReadACK)
}

void MessagePrepareReadACK::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clientid_ = GOOGLE_LONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileoffset_ = GOOGLE_LONGLONG(0);
  partid_ = GOOGLE_LONGLONG(0);
  size_ = GOOGLE_LONGLONG(0);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessagePrepareReadACK::~MessagePrepareReadACK() {
  // @@protoc_insertion_point(destructor:MessagePrepareReadACK)
  SharedDtor();
}

void MessagePrepareReadACK::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void MessagePrepareReadACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessagePrepareReadACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessagePrepareReadACK_descriptor_;
}

const MessagePrepareReadACK& MessagePrepareReadACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessagePrepareReadACK_2eproto();
  return *default_instance_;
}

MessagePrepareReadACK* MessagePrepareReadACK::default_instance_ = NULL;

MessagePrepareReadACK* MessagePrepareReadACK::New() const {
  return new MessagePrepareReadACK;
}

void MessagePrepareReadACK::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessagePrepareReadACK*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(fileoffset_, size_);
    clientid_ = GOOGLE_LONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
    port_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessagePrepareReadACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessagePrepareReadACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ClientId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Token;
        break;
      }

      // required string Token = 2;
      case 2: {
        if (tag == 18) {
         parse_Token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FileOffset;
        break;
      }

      // required int64 FileOffset = 3;
      case 3: {
        if (tag == 24) {
         parse_FileOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fileoffset_)));
          set_has_fileoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PartId;
        break;
      }

      // required int64 PartId = 4;
      case 4: {
        if (tag == 32) {
         parse_PartId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partid_)));
          set_has_partid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Size;
        break;
      }

      // required int64 Size = 5;
      case 5: {
        if (tag == 40) {
         parse_Size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Address;
        break;
      }

      // optional string Address = 6;
      case 6: {
        if (tag == 50) {
         parse_Address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Port;
        break;
      }

      // optional int32 Port = 7;
      case 7: {
        if (tag == 56) {
         parse_Port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessagePrepareReadACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessagePrepareReadACK)
  return false;
#undef DO_
}

void MessagePrepareReadACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessagePrepareReadACK)
  // required int64 ClientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->clientid(), output);
  }

  // required string Token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // required int64 FileOffset = 3;
  if (has_fileoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->fileoffset(), output);
  }

  // required int64 PartId = 4;
  if (has_partid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->partid(), output);
  }

  // required int64 Size = 5;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->size(), output);
  }

  // optional string Address = 6;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->address(), output);
  }

  // optional int32 Port = 7;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessagePrepareReadACK)
}

::google::protobuf::uint8* MessagePrepareReadACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessagePrepareReadACK)
  // required int64 ClientId = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->clientid(), target);
  }

  // required string Token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // required int64 FileOffset = 3;
  if (has_fileoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->fileoffset(), target);
  }

  // required int64 PartId = 4;
  if (has_partid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->partid(), target);
  }

  // required int64 Size = 5;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->size(), target);
  }

  // optional string Address = 6;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->address(), target);
  }

  // optional int32 Port = 7;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessagePrepareReadACK)
  return target;
}

int MessagePrepareReadACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 ClientId = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clientid());
    }

    // required string Token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required int64 FileOffset = 3;
    if (has_fileoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fileoffset());
    }

    // required int64 PartId = 4;
    if (has_partid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->partid());
    }

    // required int64 Size = 5;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }

    // optional string Address = 6;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional int32 Port = 7;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessagePrepareReadACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessagePrepareReadACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessagePrepareReadACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessagePrepareReadACK::MergeFrom(const MessagePrepareReadACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_fileoffset()) {
      set_fileoffset(from.fileoffset());
    }
    if (from.has_partid()) {
      set_partid(from.partid());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessagePrepareReadACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePrepareReadACK::CopyFrom(const MessagePrepareReadACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePrepareReadACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MessagePrepareReadACK::Swap(MessagePrepareReadACK* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(token_, other->token_);
    std::swap(fileoffset_, other->fileoffset_);
    std::swap(partid_, other->partid_);
    std::swap(size_, other->size_);
    std::swap(address_, other->address_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessagePrepareReadACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessagePrepareReadACK_descriptor_;
  metadata.reflection = MessagePrepareReadACK_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
