// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessagePrepareWriteACK.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessagePrepareWriteACK.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MessagePrepareWriteACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessagePrepareWriteACK_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessagePrepareWriteACK_2eproto() {
  protobuf_AddDesc_MessagePrepareWriteACK_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessagePrepareWriteACK.proto");
  GOOGLE_CHECK(file != NULL);
  MessagePrepareWriteACK_descriptor_ = file->message_type(0);
  static const int MessagePrepareWriteACK_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePrepareWriteACK, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePrepareWriteACK, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePrepareWriteACK, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePrepareWriteACK, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePrepareWriteACK, port_),
  };
  MessagePrepareWriteACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessagePrepareWriteACK_descriptor_,
      MessagePrepareWriteACK::default_instance_,
      MessagePrepareWriteACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePrepareWriteACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePrepareWriteACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessagePrepareWriteACK));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessagePrepareWriteACK_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessagePrepareWriteACK_descriptor_, &MessagePrepareWriteACK::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessagePrepareWriteACK_2eproto() {
  delete MessagePrepareWriteACK::default_instance_;
  delete MessagePrepareWriteACK_reflection_;
}

void protobuf_AddDesc_MessagePrepareWriteACK_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_MessageBlockMeta_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034MessagePrepareWriteACK.proto\032\026MessageB"
    "lockMeta.proto\"z\n\026MessagePrepareWriteACK"
    "\022\020\n\010ClientId\030\001 \002(\003\022\r\n\005Token\030\002 \002(\t\022 \n\005Blo"
    "ck\030\003 \002(\0132\021.MessageBlockMeta\022\017\n\007Address\030\004"
    " \001(\t\022\014\n\004Port\030\005 \001(\005", 178);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessagePrepareWriteACK.proto", &protobuf_RegisterTypes);
  MessagePrepareWriteACK::default_instance_ = new MessagePrepareWriteACK();
  MessagePrepareWriteACK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessagePrepareWriteACK_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessagePrepareWriteACK_2eproto {
  StaticDescriptorInitializer_MessagePrepareWriteACK_2eproto() {
    protobuf_AddDesc_MessagePrepareWriteACK_2eproto();
  }
} static_descriptor_initializer_MessagePrepareWriteACK_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MessagePrepareWriteACK::kClientIdFieldNumber;
const int MessagePrepareWriteACK::kTokenFieldNumber;
const int MessagePrepareWriteACK::kBlockFieldNumber;
const int MessagePrepareWriteACK::kAddressFieldNumber;
const int MessagePrepareWriteACK::kPortFieldNumber;
#endif  // !_MSC_VER

MessagePrepareWriteACK::MessagePrepareWriteACK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessagePrepareWriteACK)
}

void MessagePrepareWriteACK::InitAsDefaultInstance() {
  block_ = const_cast< ::MessageBlockMeta*>(&::MessageBlockMeta::default_instance());
}

MessagePrepareWriteACK::MessagePrepareWriteACK(const MessagePrepareWriteACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessagePrepareWriteACK)
}

void MessagePrepareWriteACK::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clientid_ = GOOGLE_LONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_ = NULL;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessagePrepareWriteACK::~MessagePrepareWriteACK() {
  // @@protoc_insertion_point(destructor:MessagePrepareWriteACK)
  SharedDtor();
}

void MessagePrepareWriteACK::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (this != default_instance_) {
    delete block_;
  }
}

void MessagePrepareWriteACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessagePrepareWriteACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessagePrepareWriteACK_descriptor_;
}

const MessagePrepareWriteACK& MessagePrepareWriteACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessagePrepareWriteACK_2eproto();
  return *default_instance_;
}

MessagePrepareWriteACK* MessagePrepareWriteACK::default_instance_ = NULL;

MessagePrepareWriteACK* MessagePrepareWriteACK::New() const {
  return new MessagePrepareWriteACK;
}

void MessagePrepareWriteACK::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    clientid_ = GOOGLE_LONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_block()) {
      if (block_ != NULL) block_->::MessageBlockMeta::Clear();
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessagePrepareWriteACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessagePrepareWriteACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ClientId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Token;
        break;
      }

      // required string Token = 2;
      case 2: {
        if (tag == 18) {
         parse_Token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Block;
        break;
      }

      // required .MessageBlockMeta Block = 3;
      case 3: {
        if (tag == 26) {
         parse_Block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Address;
        break;
      }

      // optional string Address = 4;
      case 4: {
        if (tag == 34) {
         parse_Address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Port;
        break;
      }

      // optional int32 Port = 5;
      case 5: {
        if (tag == 40) {
         parse_Port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessagePrepareWriteACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessagePrepareWriteACK)
  return false;
#undef DO_
}

void MessagePrepareWriteACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessagePrepareWriteACK)
  // required int64 ClientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->clientid(), output);
  }

  // required string Token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // required .MessageBlockMeta Block = 3;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->block(), output);
  }

  // optional string Address = 4;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->address(), output);
  }

  // optional int32 Port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessagePrepareWriteACK)
}

::google::protobuf::uint8* MessagePrepareWriteACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessagePrepareWriteACK)
  // required int64 ClientId = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->clientid(), target);
  }

  // required string Token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // required .MessageBlockMeta Block = 3;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->block(), target);
  }

  // optional string Address = 4;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->address(), target);
  }

  // optional int32 Port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessagePrepareWriteACK)
  return target;
}

int MessagePrepareWriteACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 ClientId = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clientid());
    }

    // required string Token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required .MessageBlockMeta Block = 3;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block());
    }

    // optional string Address = 4;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional int32 Port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessagePrepareWriteACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessagePrepareWriteACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessagePrepareWriteACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessagePrepareWriteACK::MergeFrom(const MessagePrepareWriteACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_block()) {
      mutable_block()->::MessageBlockMeta::MergeFrom(from.block());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessagePrepareWriteACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePrepareWriteACK::CopyFrom(const MessagePrepareWriteACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePrepareWriteACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_block()) {
    if (!this->block().IsInitialized()) return false;
  }
  return true;
}

void MessagePrepareWriteACK::Swap(MessagePrepareWriteACK* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(token_, other->token_);
    std::swap(block_, other->block_);
    std::swap(address_, other->address_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessagePrepareWriteACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessagePrepareWriteACK_descriptor_;
  metadata.reflection = MessagePrepareWriteACK_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
